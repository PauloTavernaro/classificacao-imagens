from mlxtend.plotting import plot_confusion_matrix
import matplotlib
import matplotlib.pyplot as plt
import numpy as np


#Definindo o gráfico de acurácia

acuracia = [0.8186439043209877, 0.804320987654321, 0.7394772376543209, 0.702758487654321, 0.7203896604938271, 0.739134837962963, 0.7412946428571429, 0.7490535783179012, 0.7557238082990397, 0.7623042052469136, 0.7738697741301908, 0.7835117669753087, 0.7841338734567901, 0.7845224316578483, 0.7590496399176955, 0.757738956404321, 0.7540985838779957, 0.7479782878943758, 0.7518518518518519, 0.750853587962963, 0.7484356628453851, 0.745314253647587, 0.7407218699677939, 0.7366460101594651, 0.7379834104938272, 0.7389909039648623, 0.7443358481938729, 0.7465474123677248, 0.7488149877607493, 0.7479854681069958, 0.7488111683592195, 0.7468719859182099, 0.7415859988776655, 0.733016464687727, 0.7265368716931216, 0.7273346407750343, 0.703395061728395, 0.7002073688271605, 0.6968336993510604, 0.6859155574845679, 0.6824909195272508, 0.6861347644767783, 0.6844835630203847, 0.6842629857603816, 0.6827893518518519, 0.675595058373591, 0.671957701273969, 0.670068158436214, 0.6740138416477702, 0.6777081404320988, 0.6806272316025176, 0.6833648652659069, 0.6856412328208712, 0.6820905492684042, 0.6856565656565656, 0.6891908137676367, 0.6927909085986571, 0.6962064974457216, 0.6990045969345051, 0.7012959747942387, 0.7006637699858328, 0.6997335162783751, 0.7002118851655889, 0.7002685546875, 0.702656398385565, 0.7057789994855967, 0.7071536127234199, 0.7084914839778504, 0.7075021806226517, 0.7084712577160494, 0.7085849200139106, 0.7095701785408093, 0.7068601492474209, 0.7020808568985653, 0.699647890946502, 0.6983745532813516, 0.691676311728395, 0.6895971826527382, 0.6868361999921863, 0.682978515625, 0.6823650167657369, 0.6783246057286961, 0.6778283271976796, 0.6763816550925926, 0.6759839097676108, 0.6728543102210738, 0.6719642445366822, 0.6692164702581369, 0.6681231793591345, 0.6675895919067215, 0.6650864663885497, 0.663545860171766, 0.6660076911589008, 0.6683521925072236, 0.6724820297270955, 0.6824580439814815, 0.6845148036782487, 0.6846675012597632, 0.6860645420251902, 0.6863403742283951, 0.6833779298068696, 0.6783772845557976, 0.6749237759199329, 0.6715838860695632, 0.6723473324514991, 0.6739719820055905, 0.6769557841525325, 0.6783860418095564, 0.679051456846755, 0.669248123597082, 0.6695607065398732, 0.6713437465553351, 0.6722181252048509, 0.6726342524907949, 0.6704739499463231, 0.6680012605097914, 0.667051150153002, 0.6664458928384599, 0.668505874572051, 0.6662446952160493]

n_imagens = list(range(1, 121))

plt.plot(n_imagens, acuracia)

plt.xlabel("Número de imagens")

plt.ylabel("Acurácia")

plt.yticks(np.arange(0.0, 1.1, 0.1))

xy =(acuracia[-1])


plt.annotate(text='%.4f' % xy, xy= (n_imagens[-1], acuracia[-1]), xytext=(96.4, 0.904), arrowprops=dict(arrowstyle="->", connectionstyle="arc3"))

plt.ylim([0,1])

plt.show()


#Definindo o gráfico de precisão

precisao_red = [0.77, 0.63, 0.67, 0.67, 0.61, 0.66, 0.60, 0.64, 0.72, 0.76, 0.76, 0.73, 0.73, 0.77, 0.74, 0.77, 0.76, 0.82, 0.81, 0.84, 0.83, 0.82, 0.81, 0.81, 0.81, 0.81, 0.78, 0.77, 0.73, 0.70, 0.68, 0.67, 0.65, 0.63, 0.61, 0.64, 0.55, 0.56, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.53, 0.49, 0.49, 0.48, 0.48, 0.48, 0.50, 0.52, 0.55, 0.55, 0.57, 0.57, 0.58, 0.59, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.61, 0.61, 0.62, 0.62, 0.62, 0.62, 0.61, 0.61, 0.60, 0.58, 0.58, 0.57, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.57, 0.64, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.65, 0.65, 0.67, 0.68, 0.67, 0.56, 0.55, 0.55, 0.56, 0.56, 0.56, 0.57, 0.56, 0.55, 0.55, 0.55]

precisao_green = [0.89, 0.86, 0.84, 0.80, 0.81, 0.79, 0.77, 0.76, 0.78, 0.80, 0.81, 0.81, 0.82, 0.82, 0.75, 0.75, 0.73, 0.70, 0.69, 0.68, 0.69, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67, 0.68, 0.70, 0.71, 0.71, 0.71, 0.73, 0.73, 0.73, 0.74, 0.72, 0.70, 0.71, 0.69, 0.69, 0.69, 0.69, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.69, 0.68, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.69, 0.69, 0.69, 0.68, 0.69, 0.69, 0.69, 0.68, 0.68, 0.67, 0.67, 0.67, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.66, 0.67, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67]

precisao_blue = [0.73, 0.61, 0.68, 0.64, 0.67, 0.70, 0.74, 0.75, 0.74, 0.73, 0.75, 0.77, 0.77, 0.77, 0.77, 0.76, 0.77, 0.77, 0.78, 0.78, 0.77, 0.78, 0.77, 0.77, 0.77, 0.77, 0.78, 0.78, 0.78, 0.77, 0.78, 0.77, 0.77, 0.75, 0.75, 0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.72, 0.71, 0.71, 0.71, 0.71, 0.70, 0.70, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.72, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.73, 0.74, 0.73, 0.74, 0.74, 0.74, 0.75, 0.74, 0.74, 0.74, 0.74, 0.75, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.71, 0.71, 0.71, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.71, 0.71, 0.71, 0.71, 0.71, 0.70, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.69, 0.68, 0.69, 0.69]

precisao = [0.80, 0.70, 0.73, 0.71, 0.69, 0.72, 0.70, 0.72, 0.75, 0.76, 0.77, 0.77, 0.77, 0.78, 0.75, 0.76, 0.75, 0.76, 0.76, 0.77, 0.76, 0.76, 0.75, 0.75, 0.75, 0.75, 0.75, 0.74, 0.73, 0.73, 0.72, 0.72, 0.71, 0.71, 0.70, 0.71, 0.67, 0.67, 0.66, 0.65, 0.65, 0.65, 0.69, 0.65, 0.65, 0.63, 0.63, 0.62, 0.63, 0.63, 0.64, 0.65, 0.65, 0.65, 0.66, 0.66, 0.67, 0.67, 0.67, 0.68, 0.67, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.66, 0.66, 0.66, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.64, 0.64, 0.65, 0.67, 0.67, 0.67, 0.67, 0.68, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64]


plt.plot(n_imagens, precisao_red, 'r', label='Sem Vegetação')
plt.plot(n_imagens, precisao_green, 'g', label='Vegetação de Floresta')
plt.plot(n_imagens, precisao_blue, 'b', label='Vegetação Rasteira e Arbustos')
plt.plot(n_imagens, precisao, 'black', label='Precisão Média')

plt.xlabel("Número de imagens")

plt.ylabel("Precisão")

plt.yticks(np.arange(0.0, 1.1, 0.1))

ultima_precisao = (precisao[-1])

plt.annotate(text='%.2f' % ultima_precisao, xy= (n_imagens[-1], precisao[-1]), xytext=(90.6, 0.347), arrowprops=dict(arrowstyle="->", connectionstyle="arc3"))

plt.legend()

plt.show()


#Definindo o gráfico de recall

recall_red = [0.77, 0.70, 0.75, 0.74, 0.65, 0.63, 0.56, 0.49, 0.56, 0.59, 0.58, 0.57, 0.57, 0.62, 0.62, 0.63, 0.62, 0.58, 0.58, 0.55, 0.54, 0.52, 0.51, 0.49, 0.50, 0.50, 0.51, 0.52, 0.53, 0.52, 0.53, 0.52, 0.52, 0.52, 0.52, 0.51, 0.48, 0.44, 0.43, 0.40, 0.40, 0.41, 0.41, 0.41, 0.41, 0.41, 0.42, 0.42, 0.42, 0.41, 0.43, 0.45, 0.46, 0.46, 0.48, 0.48, 0.47, 0.47, 0.47, 0.46, 0.46, 0.45, 0.45, 0.44, 0.45, 0.45, 0.45, 0.46, 0.45, 0.45, 0.45, 0.44, 0.45, 0.45, 0.45, 0.45, 0.43, 0.42, 0.41, 0.39, 0.39, 0.38, 0.38, 0.38, 0.38, 0.38, 0.37, 0.37, 0.37, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.34, 0.33, 0.33, 0.33, 0.33, 0.32, 0.32, 0.32, 0.34, 0.34, 0.34, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]

recall_green = [0.83, 0.91, 0.66, 0.61, 0.68, 0.77, 0.81, 0.81, 0.81, 0.81, 0.83, 0.83, 0.80, 0.78, 0.77, 0.76, 0.76, 0.75, 0.75, 0.76, 0.77, 0.77, 0.77, 0.76, 0.75, 0.75, 0.73, 0.72, 0.68, 0.66, 0.65, 0.66, 0.66, 0.66, 0.67, 0.70, 0.71, 0.72, 0.72, 0.72, 0.71, 0.70, 0.70, 0.70, 0.70, 0.70, 0.71, 0.71, 0.71, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.70, 0.73, 0.73, 0.73, 0.74, 0.74, 0.74, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.76, 0.78, 0.79, 0.79, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.80, 0.81, 0.81, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.81, 0.80, 0.80, 0.80, 0.79, 0.79]

recall_blue = [0.81, 0.49, 0.83, 0.80, 0.78, 0.72, 0.71, 0.74, 0.76, 0.77, 0.79, 0.81, 0.83, 0.84, 0.79, 0.80, 0.80, 0.80, 0.81, 0.80, 0.80, 0.80, 0.79, 0.79, 0.80, 0.80, 0.82, 0.82, 0.84, 0.85, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.77, 0.77, 0.76, 0.76, 0.76, 0.77, 0.76, 0.76, 0.76, 0.74, 0.73, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.72, 0.73, 0.73, 0.74, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.77, 0.77, 0.78, 0.78, 0.78, 0.79, 0.79, 0.80, 0.77, 0.76, 0.75, 0.75, 0.74, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.72, 0.71, 0.71, 0.70, 0.70, 0.70, 0.69, 0.68, 0.67, 0.66, 0.67, 0.68, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.67, 0.66, 0.66, 0.66, 0.66, 0.62, 0.62, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.65, 0.65]

recall = [0.80, 0.70, 0.74, 0.71, 0.70, 0.71, 0.69, 0.68, 0.71, 0.73, 0.73, 0.74, 0.73, 0.75, 0.73, 0.73, 0.72, 0.71, 0.71, 0.70, 0.70, 0.70, 0.69, 0.68, 0.68, 0.68, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.65, 0.64, 0.64, 0.63, 0.62, 0.63, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62, 0.62, 0.62, 0.63, 0.63, 0.64, 0.64, 0.64, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.64, 0.64, 0.64, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62, 0.62, 0.62, 0.61, 0.61, 0.61, 0.61, 0.61, 0.60, 0.60, 0.60, 0.60, 0.60, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.59, 0.59, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60]

plt.plot(n_imagens, recall_red, 'r', label='Sem Vegetação')
plt.plot(n_imagens, recall_green, 'g', label='Vegetação de Floresta')
plt.plot(n_imagens, recall_blue, 'b', label='Vegetação Rasteira e Arbustos')
plt.plot(n_imagens, recall, 'black', label='Recall Médio')

plt.xlabel("Número de imagens")

plt.ylabel("Recall")

plt.yticks(np.arange(0.0, 1.1, 0.1))

ultimo_recall = (recall[-1])

plt.annotate(text='%.2f' % ultimo_recall, xy= (n_imagens[-1], recall[-1]), xytext=(90.6, 0.474), arrowprops=dict(arrowstyle="->", connectionstyle="arc3"))

plt.legend()

plt.show()


#Definindo o gráfico de F1-Score

f1_score_red = [0.77, 0.66, 0.71, 0.70, 0.63, 0.65, 0.58, 0.56, 0.63, 0.67, 0.66, 0.64, 0.64, 0.69, 0.67, 0.69, 0.68, 0.68, 0.68, 0.67, 0.65, 0.64, 0.62, 0.61, 0.62, 0.62, 0.62, 0.62, 0.61, 0.60, 0.59, 0.58, 0.58, 0.57, 0.56, 0.57, 0.51, 0.50, 0.49, 0.46, 0.47, 0.47, 0.47, 0.47, 0.46, 0.45, 0.45, 0.44, 0.44, 0.44, 0.47, 0.48, 0.50, 0.50, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.52, 0.51, 0.51, 0.52, 0.52, 0.52, 0.53, 0.52, 0.52, 0.52, 0.51, 0.51, 0.51, 0.50, 0.50, 0.49, 0.48, 0.47, 0.46, 0.46, 0.46, 0.46, 0.45, 0.45, 0.45, 0.45, 0.44, 0.44, 0.44, 0.44, 0.43, 0.43, 0.43, 0.44, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.44, 0.44, 0.43, 0.43, 0.43, 0.44, 0.44, 0.44, 0.42, 0.42, 0.42, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43]

f1_score_green = [0.86, 0.89, 0.74, 0.69, 0.74, 0.78, 0.79, 0.78, 0.80, 0.81, 0.82, 0.82, 0.81, 0.80, 0.76, 0.75, 0.74, 0.72, 0.72, 0.72, 0.73, 0.72, 0.72, 0.72, 0.71, 0.71, 0.70, 0.70, 0.69, 0.68, 0.68, 0.68, 0.70, 0.70, 0.70, 0.72, 0.71, 0.71, 0.71, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.71, 0.71, 0.71, 0.72, 0.72, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.70, 0.71, 0.71, 0.71, 0.71, 0.70, 0.70, 0.70, 0.70, 0.69, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.70, 0.71, 0.71, 0.71, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.72]

f1_score_blue = [0.77, 0.54, 0.75, 0.71, 0.72, 0.71, 0.72, 0.75, 0.75, 0.75, 0.77, 0.79, 0.80, 0.80, 0.78, 0.78, 0.78, 0.78, 0.79, 0.79, 0.78, 0.79, 0.78, 0.78, 0.78, 0.79, 0.80, 0.80, 0.81, 0.81, 0.81, 0.81, 0.80, 0.79, 0.78, 0.77, 0.75, 0.75, 0.74, 0.74, 0.73, 0.74, 0.73, 0.73, 0.73, 0.72, 0.71, 0.71, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.73, 0.73, 0.74, 0.74, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.77, 0.77, 0.76, 0.75, 0.75, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.71, 0.71, 0.71, 0.70, 0.70, 0.70, 0.69, 0.69, 0.68, 0.68, 0.69, 0.70, 0.70, 0.70, 0.70, 0.70, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.65, 0.65, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.67, 0.67]

f1_score = [0.80, 0.70, 0.73, 0.70, 0.69, 0.71, 0.70, 0.70, 0.72, 0.74, 0.75, 0.75, 0.75, 0.76, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.70, 0.70, 0.70, 0.71, 0.71, 0.70, 0.70, 0.70, 0.69, 0.69, 0.69, 0.68, 0.69, 0.66, 0.65, 0.65, 0.63, 0.63, 0.64, 0.63, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62, 0.62, 0.63, 0.64, 0.65, 0.64, 0.65, 0.65, 0.65, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.65, 0.65, 0.65, 0.64, 0.64, 0.64, 0.63, 0.63, 0.63, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62, 0.62, 0.61, 0.61, 0.61, 0.61, 0.61, 0.62, 0.62, 0.63, 0.63, 0.63, 0.63, 0.63, 0.62, 0.62, 0.61, 0.61, 0.61, 0.62, 0.62, 0.62, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61]

plt.plot(n_imagens, f1_score_red, 'r', label='Sem Vegetação')
plt.plot(n_imagens, f1_score_green, 'g', label='Vegetação de Floresta')
plt.plot(n_imagens, f1_score_blue, 'b', label='Vegetação Rasteira e Arbustos')
plt.plot(n_imagens, f1_score, 'black', label='F1-Score Médio')

plt.xlabel("Número de imagens")

plt.ylabel("F1-Score")

plt.yticks(np.arange(0.0, 1.1, 0.1))

ultimo_f1_score = (f1_score[-1])

plt.annotate(text='%.2f' % ultimo_f1_score, xy= (n_imagens[-1], f1_score[-1]), xytext=(90.6, 0.474), arrowprops=dict(arrowstyle="->", connectionstyle="arc3"))

plt.legend()

plt.show()

#Definindo o gráfico de matriz de confusão

matriz_confusao = np.array([[3288786, 437086, 1350619],
                            [ 396291, 648158, 789196],
                            [1092093, 87165, 4352206]])

plot_confusion_matrix(conf_mat=matriz_confusao, class_names=['VRA', 'SV', 'VF'], fontcolor_threshold=1, cmap='summer', show_absolute=True, show_normed=True, norm_colormap=matplotlib.colors.LogNorm())

plt.show()